package SARL.agents

import SARL.agents.VehiculeAgent;
import SARL.agents.TrafficSignalAgent;

import SARL.agents.capacities.MovingCapacity;
import SARL.agents.capacities.TrafficSignalManagementCapacity;
import SARL.agents.capacities.BatteryCapacity;
import SARL.agents.capacities.GeoLocationCapacity;
import SARL.agents.geolocation.mapbox.Node;
import SARL.agents.geolocation.GeoLocationService;
import java.util.Optional;
import javafx.util.Pair;
import java.util.List;
import SARL.agents.geolocation.mapbox.RoutingService;
import io.sarl.core.Logging;
import io.sarl.core.DefaultContextInteractions
import SARL.agents.capacities.ChargingCapacity

skill MovingSkill implements MovingCapacity {
	uses Logging, DefaultContextInteractions;

	var owner : VehiculeAgent

	def install {
		// Initialization of the skill
		assert getOwner !== null
		this.owner = getOwner as VehiculeAgent

	}

	override move(currentNode : Node) {
		if (owner.status == VehiculeStatus.moving) {
			owner.currentLocation = currentNode
			emit(new AgentUpdateEvent(currentNode, owner.agentName))
		}
	}

	override stop() {
		owner.status = VehiculeStatus.stopped;
		info("stopped");
	}

	override wating() {
		owner.status = VehiculeStatus.waiting;
		info("waiting");
	}
}

skill GetLocationSkill implements GeoLocationCapacity {

	override getCurrentLocation() : Node {
		var optionalLocation : Optional<Pair<Double, Double>> = GeoLocationService.getCurrentLocationAsPair();
		var locationPair : Pair<Double, Double> = optionalLocation.orElseThrow([
			new RuntimeException("Can't get the IP Address, check your connection")
		]);
		var current_location_node = new SARL.agents.geolocation.mapbox.Node(locationPair.getKey(),
			locationPair.getValue());
		return current_location_node;
	}

	override getRouteToDestination(source : Node, destination : Node) : List<Node> {
		var path : List<Node> = RoutingService.getRoute(source, destination);
		return path;
	}

	override getRouteToDestination(source : Node, viaNode : Node, destination : Node) : List<Node> {
		var path : List<Node> = RoutingService.getRoute(source, viaNode, destination);
		return path;
	}
}

skill TrafficSignalSkill implements TrafficSignalManagementCapacity {
	uses Logging

	var owner : TrafficSignalAgent

	def install {
		assert getOwner !== null
		this.owner = getOwner as TrafficSignalAgent
	}

	override changeColor(newColor : TrafficLight) {
		assert owner !== null
		owner.trafficLightStatus = newColor

	}
}

skill BatterySkill implements BatteryCapacity {
	var  owner : VehiculeAgent;

	def install {
		assert getOwner !== null
		this.owner = getOwner as VehiculeAgent
	}

	def getBatteryLevel : int {
		return owner.batteryLevel
	}

	def setBatteryLevel(level : int) : void {
		if (level <= owner.batteryLevel) {
			owner.batteryLevel = level
		}
	}

	def getBatteryCapacity : int {
		return owner.batteryCapacity
	}
}

skill ChargingCapacitySkill implements ChargingCapacity {
	uses GeoLocationCapacity, DefaultContextInteractions, Logging;

	var owner : VehiculeAgent

	def install {
		assert getOwner !== null
		this.owner = getOwner as VehiculeAgent
	}

	def getBatteryLevel() : int {
		return this.owner.batteryLevel
	}

	def goCharge() : void {

		emit(
			new FindChargeStationEvent((getOwner as VehiculeAgent).currentLocation,
				(getOwner as VehiculeAgent).destinationNode,
				owner.batteryLevel))
		var closestChagreStationNode : Node;
		while ((closestChagreStationNode = (getOwner as VehiculeAgent).chargeStationNode) == null) {
		};
		info(owner.agentName+" - "+closestChagreStationNode)
		owner.fullPath = getRouteToDestination((getOwner as VehiculeAgent).currentLocation, closestChagreStationNode,
			owner.destinationNode)
	}

	def getBatteryCapacity() : int {
		return (getOwner as VehiculeAgent).batteryCapacity
	}

	def getBatteryChargeCapacity() : int {
		return (getOwner as VehiculeAgent).batteryChargeCapacity
	}

	def updateBatteryLevel(amount : int) {
		var newLevel = (getOwner as VehiculeAgent).batteryLevel + amount
		if (newLevel > (getOwner as VehiculeAgent).batteryCapacity) {
			(getOwner as VehiculeAgent).batteryLevel = (getOwner as VehiculeAgent).batteryCapacity
		} else {
			(getOwner as VehiculeAgent).batteryLevel = newLevel
		}
	}

	def setBatteryLevel(amount : int) {
		if (amount >= 0 && amount <= (getOwner as VehiculeAgent).batteryCapacity) {
			(getOwner as VehiculeAgent).batteryLevel = amount
		} else {
			throw new Exception("Invalid battery level. Battery level should be between 0 and battery capacity.")
		}
	}

}
