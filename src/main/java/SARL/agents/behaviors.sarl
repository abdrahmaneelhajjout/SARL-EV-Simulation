package SARL.agents

import SARL.agents.capacities.MovingCapacity
import SARL.agents.capacities.BatteryCapacity
import SARL.agents.capacities.TrafficSignalManagementCapacity
import SARL.agents.TimeStep
import SARL.agents.VehicleAgent
import io.sarl.core.Logging
import static SARL.agents.utils.geolocation.mapbox.NodeUtils.getNodesBetween;
import io.sarl.core.Initialize
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Schedules
import SARL.agents.capacities.ChargingCapacity
import SARL.agents.capacities.GeoLocationCapacity
import SARL.agents.utils.geolocation.mapbox.NodeUtils
import SARL.agents.utils.TrafficLight
import java.util.ArrayList
import java.util.stream.Stream
import java.util.stream.Collectors
import java.util.UUID
import io.sarl.lang.core.Address
import java.util.Map
import java.util.HashMap
import io.sarl.core.Behaviors

// Behavior
behavior VehicleAgentBehavior {
	uses Logging, MovingCapacity, ChargingCapacity, DefaultContextInteractions, Behaviors

	var timeStep : long
	var chargeNeeded : long

	var closestStationID : Address;
	val owner : VehicleAgent
	var currentNodeIndex : int = 0
	var currentPathIndex : int = 0
	var distanceBetweenNodes : double;
	var lookingForCharging : boolean = false;

	new (owner : VehicleAgent) {
		super(owner)
		this.owner = owner
	}

	// React to the TimeStep event
	on TimeStep {
		this.distanceBetweenNodes = occurrence.step * ((owner.speedKmPerHour * 1000) / 3600) // divide by 100 to convert KM to Meter because distanceBetweenNodes in meters and speed in seconds
		// Check battery status
		if (getBatteryLevel() < 20) {
			info("charging ...")
			updateBatteryLevel(50);
			goCharge();
			lookingForCharging = true
			var fullPathToPaint = Stream.concat(owner.fromSourceToDestinationViaStationPair.getKey().stream(),
				owner.fromSourceToDestinationViaStationPair.getValue().stream()).collect(Collectors.toList());
			emit(new FullPathUpdateEvent(owner.agentName, fullPathToPaint));
		}
		if (currentNodeIndex >= owner.subPath.size && currentPathIndex < owner.fullPath.size - 1) {
			// Fetch subPath between two nodes
			owner.subPath = getNodesBetween(owner.fullPath.get(currentPathIndex),
				owner.fullPath.get(currentPathIndex + 1), distanceBetweenNodes)
			currentNodeIndex = 0
			currentPathIndex++
		}
		if (currentNodeIndex < owner.subPath.size) {
			// Move to the next node in the subPath
			owner.status = VehicleStatus.moving
			move(owner.subPath.get(currentNodeIndex))
			currentNodeIndex++
		} else {
			if (lookingForCharging) {
				info("The agent has reached the charging Station.")
				waiting("charging");
				emit(new ChargeRequestEvent(owner.batteryLevel, owner.batteryCapacity, owner.batteryChargeCapacity)) [
					it == closestStationID
				]
				
				
			} else {
				info("The agent has reached its destination.")
				stop()
				unregisterBehavior(this)
			}

		}

	}
	on ChargeCompletedEvent {
		currentNodeIndex = 0
		currentPathIndex = 0
		lookingForCharging = false
	}

	on ChargeApprovedEvent {
		info("Charge approved for " + occurrence.chargeNeeded + " kWh. Total price: " + occurrence.totalPrice + " Dh.");
		this.chargeNeeded = occurrence.chargeNeeded
		charging()
		registerBehavior(new ChargingBehavior(owner, occurrence.chargeNeeded))

	}

	on chargeStationFoundEvent {
		info("updated closest " + occurrence.closestStation + " - " + occurrence.stationAdressAndNamePair.getValue)
		closestStationID = occurrence.stationAdressAndNamePair.getKey()
		owner.chargeStationNode = occurrence.closestStation;
	}
	
	

}

behavior ChargingBehavior {
	uses Logging, Behaviors, MovingCapacity, DefaultContextInteractions

	val owner : VehicleAgent
	var chargeNeeded : long

	new (owner : VehicleAgent, chargeNeeded : long) {
		super(owner)
		this.owner = owner
		this.chargeNeeded = chargeNeeded
	}

	on TimeStep {
		var chargeToAdd : long = Math.min(occurrence.step * owner.batteryChargeCapacity, chargeNeeded)
		owner.batteryLevel = owner.batteryLevel + chargeToAdd
		chargeNeeded = chargeNeeded - chargeToAdd
		info("Charging: " + (owner.batteryLevel * 100 / owner.batteryCapacity) + "%")

		// If the vehicle is fully charged, stop the charging behavior
		if (chargeNeeded <= 0 || owner.batteryLevel >= owner.batteryCapacity) {
			info("Charging complete for vehicle " + owner.agentName + "!")
			owner.fullPath = owner.fromSourceToDestinationViaStationPair.getValue()	
			emit(new ChargeCompletedEvent())[it.ID == owner.ID]		
			unregisterBehavior(this)
		}
	}
}

behavior TrafficSignalBehavior {
	uses DefaultContextInteractions, TrafficSignalManagementCapacity, Schedules;

	val owner : TrafficSignalAgent

	new (owner : TrafficSignalAgent) {
		super(owner);
		this.owner = owner;
	}

	on Initialize {
		var time : long = owner.trafficLightStatus.getLightStatus.duration;

		every(time) [ // every 1000 milliseconds
			var lightstatus : TrafficLight = owner.trafficLightStatus.getNext();
			changeColor(lightstatus);
			emit(new TrafficColorChangedEvent(lightstatus.lightStatus.getImageIconName(), owner.agentName));
		]

	}
}

behavior EnvironmentBehavior {
	uses DefaultContextInteractions, Logging, Schedules;

	val owner : EnvironmentAgent

	new (owner : EnvironmentAgent) {
		super(owner);
		this.owner = owner;
	}

	on VehicleAgentInitEvent {
		owner.map.OnVehicleAgentInit(occurrence.initial_location_node, occurrence.agentName, occurrence.path)
	}

	// event triggered when the vehicle agent change its current position (node)
	on VehicleAgentUpdateEvent {
		owner.map.onVehicleAgentUpdate(occurrence.current_location_node, occurrence.agentName)
	}

	on TimeStepChangedEvent {
		info("changed time step")
		// cancel the previous task
		cancel(owner.timeStepTask)
		// update the time step
		owner.timeStep = occurrence.timeStep
		if (owner.timeStep > 0) {
			// start a new task with the new time step
			owner.timeStepTask = every(owner.timeStep) [
				emit(new TimeStep(owner.currentTimeStep))
			]
		}

	}

	// event triggered when the traffic agent spawned to set themselves on the map view
	on TrafficSignaInitEvent {
		owner.map.onTrafficAgentInit(occurrence.location, occurrence.agentName, occurrence.color)
	}

	on TrafficColorChangedEvent {
		owner.map.onTrafficSignalChanged(occurrence.agentName, occurrence.colorIcon);
	}

	on ChargeStationInitEvent {
		owner.chargeStationNodes.add(occurrence.location);
		owner.map.onChargeStationIniti(occurrence.location, occurrence.agentName, occurrence.source);
	}

	on FullPathUpdateEvent {
		owner.map.onFullPathUpdate(occurrence.agentName, occurrence.newPath)
	}

	on FindChargeStationEvent {
		while (owner.chargeStationNodes.size() < 1) {
			info("waiting ")
		};
		var location = occurrence.currentLocation
		var closestNode = NodeUtils.findClosestNode(owner.chargeStationNodes, location)
		emit(new chargeStationFoundEvent(closestNode, owner.map.chargeStationNodes.get(closestNode))) [
			it == occurrence.source
		]; 	// to send back the event to the sender
	}

}

behavior ChargeStationBehvior {
	uses DefaultContextInteractions, Logging;

	val owner : ChargeStationAgent
	var priceInDhPerKwh : double
	var chargingVehicles : Map<Address, Integer> = new HashMap() // Key is the vehicle's agentName, value is the amount of charge it needs

	new (owner : ChargeStationAgent) {
		super(owner)
		this.owner = owner
		this.priceInDhPerKwh = owner.priceInDhPerKwh
	}

	on ChargeRequestEvent {
		var neededCharge = occurrence.batteryCapacity - occurrence.currentBatteryLevel; // How much charge the vehicle needs
		var totalPrice = neededCharge * this.priceInDhPerKwh; // The total price of the charging
		info("Charge requested: " + neededCharge + " kWh. Total price: " + totalPrice + " Dh.");

		// Add the vehicle to the charging map
		emit(new ChargeApprovedEvent(totalPrice, neededCharge))[it == occurrence.source];

	}

}
