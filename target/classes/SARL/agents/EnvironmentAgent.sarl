/** 
 * 
 */
package SARL.agents

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.ParticipantJoined
import io.sarl.core.ParticipantLeft
import io.sarl.core.SpaceCreated
import io.sarl.core.SpaceDestroyed
import io.sarl.core.Schedules
import io.sarl.core.DefaultContextInteractions
import SARL.map.JXMapViewerFrame
import java.util.UUID
import java.util.List
import SARL.agents.utils.geolocation.mapbox.Node
import SARL.agents.utils.geolocation.mapbox.NodeUtils
import java.util.ArrayList
import javax.accessibility.Accessible
import org.eclipse.xtend.lib.annotations.Accessors
import io.sarl.core.Behaviors
import io.sarl.lang.core.Agent
import io.sarl.core.AgentTask

/** 
 * @author ELHAJJOUT
 * 
 */
agent EnvironmentAgent extends Agent {
	uses Logging, Schedules, DefaultContextInteractions, Behaviors

	// uses GetLocation
	@Accessors var timeStep : long;
	@Accessors var map : JXMapViewerFrame;

	@Accessors var currentTimeStep : long = 1

	@Accessors var chargeStationNodes : List<Node>

	@Accessors var timeStepTask : AgentTask

	// var roadNetwork: Graph
	on Initialize {

		var envBehav : EnvironmentBehavior = new EnvironmentBehavior(this);
		registerBehavior(envBehav);
		chargeStationNodes = new ArrayList();
		this.timeStep = occurrence.parameters.get(0) as Long;
		var map_center_node = occurrence.parameters.get(1) as Node; // from where the map (jxmap) starts
		map = new JXMapViewerFrame(defaultContext, ID, map_center_node, timeStep);
		// the timstep for the
		timeStepTask = every(timeStep) [ // every 1000 milliseconds
			emit(new TimeStep(currentTimeStep))

		]
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on SpaceCreated {
		// Event trigger when a space is created into one of the contexts where the agent is.
	}

	on SpaceDestroyed {
		// Event trigger when a space is destroyed from one of the contexts where the agent is.
	}

	on ParticipantJoined {
		// Event trigger when a participant has joined a space.
	}

	on ParticipantLeft {
		// Event trigger when a participant has left a space.
	}

	uses DefaultContextInteractions
}
