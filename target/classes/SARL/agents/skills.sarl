package SARL.agents

import SARL.agents.VehiculeAgent;
import SARL.agents.TrafficSignalAgent;

import SARL.agents.capacities.MovingCapacity;
import SARL.agents.capacities.TrafficSignalManagementCapacity;
import SARL.agents.capacities.BatteryCapacity;
import SARL.agents.capacities.GetLocation;
import SARL.agents.geolocation.mapbox.Node;
import SARL.agents.geolocation.GeoLocationService;
import java.util.Optional;
import javafx.util.Pair;
import java.util.List;
import SARL.agents.geolocation.mapbox.RoutingService;
import io.sarl.core.Logging;
import io.sarl.core.DefaultContextInteractions

skill MovingSkill implements MovingCapacity {
	uses Logging, DefaultContextInteractions;

	var owner : VehiculeAgent

	def install {
		// Initialization of the skill
		assert getOwner !== null
		this.owner = getOwner as VehiculeAgent

	}

	override move(currentNode : Node) {
		if (owner.status == VehiculeStatus.moving) {
			owner.currentLocation = currentNode
			emit(new AgentUpdateEvent(currentNode, owner.agentName))
			info("moved to : " + currentNode);
		}
	}

	override stop() {
		owner.status = VehiculeStatus.stopped;
		info("stopped");
	}

	override wating() {
		owner.status = VehiculeStatus.waiting;
		info("waiting");
	}
}

skill GetLocationSkill implements GetLocation {

	override getCurrentLocation() : Node {
		var optionalLocation : Optional<Pair<Double, Double>> = GeoLocationService.getCurrentLocationAsPair();
		var locationPair : Pair<Double, Double> = optionalLocation.orElseThrow([
			new RuntimeException("Can't get the IP Address, check your connection")
		]);
		var current_location_node = new SARL.agents.geolocation.mapbox.Node(locationPair.getKey(),
			locationPair.getValue());
		return current_location_node;
	}

	override getRouteToDestination(source : Node, destination : Node) : List<Node> {
		var path : List<Node> = RoutingService.getRoute(source, destination);
		return path;
	}
}

skill TrafficSignalSkill implements TrafficSignalManagementCapacity {
	uses Logging

	var owner : TrafficSignalAgent

	def install {
		assert getOwner !== null
		this.owner = getOwner as TrafficSignalAgent

	}

	def prepareUninstallation {
		// Function invoked when the skill is preparing to be uninstalled from the owner, but before the owner is destroyed.
		// You should put all the resource release statements that should be executed before the owner is destroyed.
		info("Preparing the uninstallation of the skill")
	}

	def uninstall {
		// Function invoked when the skill is uninstalled from the owner, and after the owner is destroyed.
		// You should put all the resource release statements in this block of code.
		info("Uninstalling the skill")
	}

	override changeColor(newColor : TrafficLight) {
		assert owner !== null
		owner.trafficLightStatus = newColor
	}
}

skill BatterySkill implements BatteryCapacity {
	var owner : VehiculeAgent

	def install {
		// Initialization of the skill
		assert getOwner !== null
		this.owner = getOwner as VehiculeAgent

	}

	override chargeBattery() {
		this.owner.setBatteryLevel(100)
	}

	override checkBatteryStatus() : double {

		return this.owner.getBatteryLevel();
	}
}
