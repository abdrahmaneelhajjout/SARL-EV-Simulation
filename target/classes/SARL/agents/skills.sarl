package SARL.agents

import SARL.agents.VehicleAgent;
import SARL.agents.TrafficSignalAgent;

import SARL.agents.capacities.MovingCapacity;
import SARL.agents.capacities.TrafficSignalManagementCapacity;
import SARL.agents.capacities.BatteryCapacity;
import SARL.agents.capacities.GeoLocationCapacity;
import SARL.agents.utils.geolocation.mapbox.Node;
import SARL.agents.utils.geolocation.GeoLocationService;
import java.util.Optional;
import javafx.util.Pair;
import java.util.List;
import SARL.agents.utils.geolocation.mapbox.RoutingService;
import io.sarl.core.Logging;
import io.sarl.core.DefaultContextInteractions
import SARL.agents.capacities.ChargingCapacity
import SARL.agents.utils.TrafficLight

skill MovingSkill implements MovingCapacity {
	uses Logging, DefaultContextInteractions;

	var owner : VehicleAgent

	def install {
		// Initialization of the skill
		assert getOwner !== null
		this.owner = getOwner as VehicleAgent

	}

	override move(currentNode : Node) {
		if (owner.status == VehicleStatus.moving) {
			owner.currentLocation = currentNode
			emit(new VehicleAgentUpdateEvent(currentNode, owner.agentName))
		}
	}

	override stop() {
		owner.status = VehicleStatus.stopped;
		info("stopped");
	}

	override waiting(reason : String) {
		owner.status = VehicleStatus.waiting;
		info("waiting for " + reason + " reason");
	}

	override charging {
		owner.status = VehicleStatus.charging;

	}

}

skill GetLocationSkill implements GeoLocationCapacity {

	override getCurrentLocation() : Node {
		var optionalLocation : Optional<Pair<Double, Double>> = GeoLocationService.getCurrentLocationAsPair();
		var locationPair : Pair<Double, Double> = optionalLocation.orElseThrow([
			new RuntimeException("Can't get the IP Address, check your connection")
		]);
		var current_location_node = new SARL.agents.utils.geolocation.mapbox.Node(locationPair.getKey(),
			locationPair.getValue());
		return current_location_node;
	}

	override getRouteToDestination(source : Node, destination : Node) : List<Node> {
		var path : List<Node> = RoutingService.getRoute(source, destination);
		return path;
	}

	override getRouteToDestination(source : Node, viaNode : Node, destination : Node) : List<Node> {
		var path : List<Node> = RoutingService.getRoute(source, viaNode, destination);
		return path;
	}

	override getRouteToDestinationAsPair(source : Node, viaNode : Node,
		destination : Node) : Pair<List<Node>, List<Node>> {
		var path : Pair<List<Node>, List<Node>> = RoutingService.getRouteAsPair(source, viaNode, destination);
		return path;
	}

}

skill TrafficSignalSkill implements TrafficSignalManagementCapacity {
	uses Logging

	var owner : TrafficSignalAgent

	def install {
		assert getOwner !== null
		this.owner = getOwner as TrafficSignalAgent
	}

	override changeColor(newColor : TrafficLight) {
		assert owner !== null
		owner.trafficLightStatus = newColor
	}
}

skill BatterySkill implements BatteryCapacity {
	var owner : VehicleAgent;

	def install {
		assert getOwner !== null
		this.owner = getOwner as VehicleAgent
	}

	def getBatteryLevel : long {
		return owner.batteryLevel
	}

	def setBatteryLevel(level : long) : void {
		if (level <= owner.batteryLevel) {
			owner.batteryLevel = level
		}
	}

	def getBatteryCapacity : long {
		return owner.batteryCapacity
	}
}

skill ChargingCapacitySkill implements ChargingCapacity {
	uses GeoLocationCapacity, DefaultContextInteractions, Logging;

	var owner : VehicleAgent

	def install {
		assert getOwner !== null
		this.owner = getOwner as VehicleAgent
	}

	def getBatteryLevel() : long {
		return this.owner.batteryLevel
	}

	def goCharge() : void {

		emit(
			new FindChargeStationEvent((getOwner as VehicleAgent).currentLocation,
				(getOwner as VehicleAgent).destinationNode, owner.batteryLevel))
		var closestChagreStationNode : Node;
		while ((closestChagreStationNode = (getOwner as VehicleAgent).chargeStationNode) == null) {
		};
		info(owner.agentName + " - " + closestChagreStationNode)
		owner.fromSourceToDestinationViaStationPair = getRouteToDestinationAsPair(
			(getOwner as VehicleAgent).currentLocation, closestChagreStationNode, owner.destinationNode);
		owner.fullPath = owner.fromSourceToDestinationViaStationPair.getKey()
	}

	def getBatteryCapacity() : long {
		return (getOwner as VehicleAgent).batteryCapacity
	}

	def getBatteryChargeCapacity() : long {
		return (getOwner as VehicleAgent).batteryChargeCapacity
	}

	def updateBatteryLevel(amount : long) {
		var newLevel = (getOwner as VehicleAgent).batteryLevel + amount
		if (newLevel > (getOwner as VehicleAgent).batteryCapacity) {
			(getOwner as VehicleAgent).batteryLevel = (getOwner as VehicleAgent).batteryCapacity
		} else {
			(getOwner as VehicleAgent).batteryLevel = newLevel
		}
	}

	def setBatteryLevel(amount : long) {
		if (amount >= 0 && amount <= (getOwner as VehicleAgent).batteryCapacity) {
			(getOwner as VehicleAgent).batteryLevel = amount
		} else {
			throw new Exception("Invalid battery level. Battery level should be between 0 and battery capacity.")
		}
	}

}
