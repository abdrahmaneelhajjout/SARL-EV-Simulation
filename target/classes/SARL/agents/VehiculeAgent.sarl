/** 
 * 
 */
package SARL.agents
import static SARL.agents.geolocation.mapbox.NodeUtils.getNodesBetween;
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.ParticipantJoined
import io.sarl.core.ParticipantLeft
import io.sarl.core.SpaceCreated
import io.sarl.core.SpaceDestroyed
import io.sarl.core.Behaviors
import SARL.agents.geolocation.mapbox.Node
import SARL.agents.capacities.GetLocation
import java.util.List
import java.util.Collections
import SARL.agents.geolocation.mapbox.RoutingService
import SARL.map.JXMapViewerExample

/** 
 * @author ELHAJJOUT
 * 
 */
@SuppressWarnings("unused_private_member")
agent VehiculeAgent {
	uses Logging, Behaviors, GetLocation;
	var startNode : Node;
	var fullPath : List<Node>;
	var subPath : List<Node>;
	var currentLocation : Node;
	var destination : String;
	var destinationNode : Node
	var speed : double;
	var status : Status;
	var batteryLevel : double
	var frame : JXMapViewerExample;
	
	on Initialize {
		this.startNode = occurrence.parameters.get(0) as Node;
		this.destinationNode = occurrence.parameters.get(1) as Node;
		this.frame = occurrence.parameters.get(2) as JXMapViewerExample;
		this.fullPath = RoutingService.getRoute(startNode, destinationNode);
		this.subPath = getNodesBetween(fullPath.get(0), fullPath.get(1), 0.1) // get the subpath for the first pair
		
		
		var moving_behavior = new MovingBehavior(this)
		registerBehavior(moving_behavior)
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("The agent was started.")
		info("from " + startNode)
		info("to " + destinationNode)
	}
	
	def getBatteryLevel() : double {
		return this.batteryLevel
	}

	def setBatteryLevel(level: double = 100): void {
		this.batteryLevel = level
	}

	def getDestination() : String {
		return this.destination
	}

	def setDestination(level : double = 100) : void {
		this.batteryLevel = level
	}

	def getDestinationNode() : Node {
		return this.destinationNode
	}

	def setDestinationNode(node : Node) : void {
		this.destinationNode = node
	}

	def getStartNode() : Node {
		return this.startNode
	}

	def setStartNode(node : Node) : void {
		this.startNode = node
	}

	def getCurrentLocation() : Node {
		return this.currentLocation
	}

	def setCurrentLocation(node : Node) : void {
		this.currentLocation = node
	}

	def getStatus() : Status {
		return this.status
	}

	def setStatus(status : Status) : void {
		this.status = status
	}

	def getFullPath() : List<Node> {
		return this.fullPath 
	}

	def setFullPath(fullPath : List<Node>) : void {
		this.fullPath = fullPath 
	}

	def getSubPath() : List<Node> {
		return this.subPath 
	}

	def setSubPath(subPath : List<Node>) : void {
		this.subPath = subPath 
	}

	def getFrame() : JXMapViewerExample{
		return this.frame
	}

	def setFrame(frame : JXMapViewerExample) : void {
		this.frame = frame
	}
	

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on SpaceCreated {
		// Event trigger when a space is created into one of the contexts where the agent is.
	}

	on SpaceDestroyed {
		// Event trigger when a space is destroyed from one of the contexts where the agent is.
	}

	on ParticipantJoined {
		// Event trigger when a participant has joined a space.
	}

	on ParticipantLeft {
		// Event trigger when a participant has left a space.
	}
}



